// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TopigoClient is the client API for Topigo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopigoClient interface {
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error)
	ModifySubscription(ctx context.Context, in *ModifySubscriptionRequest, opts ...grpc.CallOption) (*ModifySubscriptionResponse, error)
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error)
	StartSubscriptionStreaming(ctx context.Context, in *StartSubscriptionStreamingRequest, opts ...grpc.CallOption) (Topigo_StartSubscriptionStreamingClient, error)
	EndSubscriptionStreaming(ctx context.Context, in *EndSubscriptionStreamingRequest, opts ...grpc.CallOption) (*EndSubscriptionStreamingResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type topigoClient struct {
	cc grpc.ClientConnInterface
}

func NewTopigoClient(cc grpc.ClientConnInterface) TopigoClient {
	return &topigoClient{cc}
}

func (c *topigoClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error) {
	out := new(CreateSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/Topigo/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topigoClient) ModifySubscription(ctx context.Context, in *ModifySubscriptionRequest, opts ...grpc.CallOption) (*ModifySubscriptionResponse, error) {
	out := new(ModifySubscriptionResponse)
	err := c.cc.Invoke(ctx, "/Topigo/ModifySubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topigoClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error) {
	out := new(DeleteSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/Topigo/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topigoClient) StartSubscriptionStreaming(ctx context.Context, in *StartSubscriptionStreamingRequest, opts ...grpc.CallOption) (Topigo_StartSubscriptionStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Topigo_ServiceDesc.Streams[0], "/Topigo/StartSubscriptionStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &topigoStartSubscriptionStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Topigo_StartSubscriptionStreamingClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type topigoStartSubscriptionStreamingClient struct {
	grpc.ClientStream
}

func (x *topigoStartSubscriptionStreamingClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *topigoClient) EndSubscriptionStreaming(ctx context.Context, in *EndSubscriptionStreamingRequest, opts ...grpc.CallOption) (*EndSubscriptionStreamingResponse, error) {
	out := new(EndSubscriptionStreamingResponse)
	err := c.cc.Invoke(ctx, "/Topigo/EndSubscriptionStreaming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topigoClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/Topigo/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopigoServer is the server API for Topigo service.
// All implementations must embed UnimplementedTopigoServer
// for forward compatibility
type TopigoServer interface {
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error)
	ModifySubscription(context.Context, *ModifySubscriptionRequest) (*ModifySubscriptionResponse, error)
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error)
	StartSubscriptionStreaming(*StartSubscriptionStreamingRequest, Topigo_StartSubscriptionStreamingServer) error
	EndSubscriptionStreaming(context.Context, *EndSubscriptionStreamingRequest) (*EndSubscriptionStreamingResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	mustEmbedUnimplementedTopigoServer()
}

// UnimplementedTopigoServer must be embedded to have forward compatible implementations.
type UnimplementedTopigoServer struct {
}

func (UnimplementedTopigoServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedTopigoServer) ModifySubscription(context.Context, *ModifySubscriptionRequest) (*ModifySubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySubscription not implemented")
}
func (UnimplementedTopigoServer) DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedTopigoServer) StartSubscriptionStreaming(*StartSubscriptionStreamingRequest, Topigo_StartSubscriptionStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method StartSubscriptionStreaming not implemented")
}
func (UnimplementedTopigoServer) EndSubscriptionStreaming(context.Context, *EndSubscriptionStreamingRequest) (*EndSubscriptionStreamingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSubscriptionStreaming not implemented")
}
func (UnimplementedTopigoServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedTopigoServer) mustEmbedUnimplementedTopigoServer() {}

// UnsafeTopigoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopigoServer will
// result in compilation errors.
type UnsafeTopigoServer interface {
	mustEmbedUnimplementedTopigoServer()
}

func RegisterTopigoServer(s grpc.ServiceRegistrar, srv TopigoServer) {
	s.RegisterService(&Topigo_ServiceDesc, srv)
}

func _Topigo_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopigoServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Topigo/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopigoServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topigo_ModifySubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopigoServer).ModifySubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Topigo/ModifySubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopigoServer).ModifySubscription(ctx, req.(*ModifySubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topigo_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopigoServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Topigo/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopigoServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topigo_StartSubscriptionStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartSubscriptionStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopigoServer).StartSubscriptionStreaming(m, &topigoStartSubscriptionStreamingServer{stream})
}

type Topigo_StartSubscriptionStreamingServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type topigoStartSubscriptionStreamingServer struct {
	grpc.ServerStream
}

func (x *topigoStartSubscriptionStreamingServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Topigo_EndSubscriptionStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndSubscriptionStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopigoServer).EndSubscriptionStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Topigo/EndSubscriptionStreaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopigoServer).EndSubscriptionStreaming(ctx, req.(*EndSubscriptionStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topigo_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopigoServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Topigo/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopigoServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Topigo_ServiceDesc is the grpc.ServiceDesc for Topigo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Topigo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Topigo",
	HandlerType: (*TopigoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscription",
			Handler:    _Topigo_CreateSubscription_Handler,
		},
		{
			MethodName: "ModifySubscription",
			Handler:    _Topigo_ModifySubscription_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _Topigo_DeleteSubscription_Handler,
		},
		{
			MethodName: "EndSubscriptionStreaming",
			Handler:    _Topigo_EndSubscriptionStreaming_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Topigo_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartSubscriptionStreaming",
			Handler:       _Topigo_StartSubscriptionStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "topigo.proto",
}
